/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Vacancy } from "./Vacancy";
import { VacancyCountArgs } from "./VacancyCountArgs";
import { VacancyFindManyArgs } from "./VacancyFindManyArgs";
import { VacancyFindUniqueArgs } from "./VacancyFindUniqueArgs";
import { CreateVacancyArgs } from "./CreateVacancyArgs";
import { UpdateVacancyArgs } from "./UpdateVacancyArgs";
import { DeleteVacancyArgs } from "./DeleteVacancyArgs";
import { ApplicationFindManyArgs } from "../../application/base/ApplicationFindManyArgs";
import { Application } from "../../application/base/Application";
import { Company } from "../../company/base/Company";
import { VacancyService } from "../vacancy.service";
@graphql.Resolver(() => Vacancy)
export class VacancyResolverBase {
  constructor(protected readonly service: VacancyService) {}

  async _vacanciesMeta(
    @graphql.Args() args: VacancyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Vacancy])
  async vacancies(
    @graphql.Args() args: VacancyFindManyArgs
  ): Promise<Vacancy[]> {
    return this.service.vacancies(args);
  }

  @graphql.Query(() => Vacancy, { nullable: true })
  async vacancy(
    @graphql.Args() args: VacancyFindUniqueArgs
  ): Promise<Vacancy | null> {
    const result = await this.service.vacancy(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Vacancy)
  async createVacancy(
    @graphql.Args() args: CreateVacancyArgs
  ): Promise<Vacancy> {
    return await this.service.createVacancy({
      ...args,
      data: {
        ...args.data,

        company: args.data.company
          ? {
              connect: args.data.company,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Vacancy)
  async updateVacancy(
    @graphql.Args() args: UpdateVacancyArgs
  ): Promise<Vacancy | null> {
    try {
      return await this.service.updateVacancy({
        ...args,
        data: {
          ...args.data,

          company: args.data.company
            ? {
                connect: args.data.company,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Vacancy)
  async deleteVacancy(
    @graphql.Args() args: DeleteVacancyArgs
  ): Promise<Vacancy | null> {
    try {
      return await this.service.deleteVacancy(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Application], { name: "applications" })
  async findApplications(
    @graphql.Parent() parent: Vacancy,
    @graphql.Args() args: ApplicationFindManyArgs
  ): Promise<Application[]> {
    const results = await this.service.findApplications(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Company, {
    nullable: true,
    name: "company",
  })
  async getCompany(@graphql.Parent() parent: Vacancy): Promise<Company | null> {
    const result = await this.service.getCompany(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
